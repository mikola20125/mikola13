			№1
1) Дан код: 

var a = 1, b = 1, c, d;
1.1
 c = ++a; alert(c); // 2

1.2
 d = b++; alert(d); // 1

1.3
 c = (2+ ++a); alert(c); // 5

1.4
 d = (2+ b++); alert(d); // 4

1.5
 alert(a); // 3

1.6 
alert(b); // 3

Почему код даёт именно такие результаты?

Ответ.
1.1 Будет результат с = 2;  т.к. приоритет выполнения у префиксного инкремента выше, а у оператора присваивания ниже, то соответственно,
сначала переменная "а" будет увеличена на 1, затем результат увеличения будет присвоен переменной "с";
1.2
Здесь будет возвращено значение d = 1, т.к. особенностью постфиксного инкремента является то, что он увеличивает значение 
переменной, но не возвращает его сразу. Или значение операнда возвращается, а затем увеличивается.
1.3
"С" = 5, т.к. в выражении выше "а" уже была увеличена на единицу, но результат увеличения был присвоен переменной "с", теперь "с" мы
присваиваем новое значение и получается, что "а"  снова увеличивается на 1 (потому, что приоритет у инкремента выше чем у сложения),
 затем к операнду "2" мы прибавляем "3".
1.4
"d" = 4, т.к. в выражении выше мы присваивали переменной "d" результат постфиксного инкремента переменной b, соответственно
переменной "d" было присвоено значение 1, но переменная "b" получила значение 2.  В этом примере, мы снова увеличиваем переменную 
"b" посредством постфиксного инкремента и как следствие значение переменной "b" будет 2(но увеличено до 3 в памяти)
и сложив его с операндом слева 2, получим 4.
1.5
Будет выведено значение "а" равное 3, т.к. ранее мы посредством префиксного инкремента уеличивали ее значение на 1. В примере 1.1 пере-
менная была увеличена на 1 и стала равна 2, но результат был присвоен переменной "с". Потом, в примере 1.3 переменная была еще раз
увеличена на 1(и соответственно стала равна 3), а в этом примере мы просто выводим в браузере ее значение.
1.6
С переменной "b" то же самое. Посредством постфиксного инкремента было увеличено ее значение в примере 1.2, затем в примере 1.4 значе-
ние было увеличено еще на 1(и стало равно 3). В этом примере просто выводится ее значение в браузере. 



			№2
2) Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);

			Ответ.
В данном примере "х" будет равен 5, т.к. сначала выполнятся действия сгруппированные в скобки, затем будет выполнено сложение
(2*2 =4)+1=5;


			№3
3)Объявить две целочисленные переменные a и b и задать им произвольные начальные значения.
 Затем написать скрипт, который работает по следующему принципу:
* если a и b положительные, вывести их разность;
* если а и b отрицательные, вывести их произведение;
* если а и b разных знаков, вывести их сумму;
			Ответ.
var a = -1;
var b = 1;
function myFunction(a, b){
	a  = +a;
	b = +b;
	if(Math.sign(a) === 1  &&  Math.sign(b) === 1){
		var c =  a - b;
	}else if(Math.sign(a)  === -1 && Math.sign(b) === -1){
		var c =  * b;
 	 }else{
		var c = a +b;
	}
	return c;
}
alert(myFunction(a,b));
В этом примере была создана функция, которая сначала приводит значения переменных a и b к числу, затем в условии определяется отрицательное
или положител?ое значение у переменных с помощью метода Math.sign(), и в соответствии с этим выполняет арифметические действия
с переменными, записывает их результат в переменную "с" и возвращает значение переменной "с".

				№4
4) Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
			Ответ.
var a = +prompt("Введите значение переменной \"а\"");

switch(a){
	case 0:
		alert("Значение переменной а =  0");
		break;
	case 1:
		alert("Значение переменной а = 1");
		break;
	case 2:
		alert("Значение переменной а = 2");
		break;
	case 3:
		alert("Значение переменной а = 3");
		break;
	case 4:
		alert("Значение переменной а = 4");
		break;
	case 5:
		alert("Значение переменной а = 5");
		break;
	case 6:
		alert("Значение переменной а = 6");
		break;
	case 7:
		alert("Значение переменной а = 7");
		break;
	case 8:
		alert("Значение переменной а = 8");
		break;
	case 9:
		alert("Значение переменной а = 9");
		break;
	case 10:
		alert("Значение переменной а = 10");
		break;
	case 11:
		alert("Значение переменной а = 11");
		break;
	case 12:
		alert("Значение переменной а = 12");
		break;
	case 13:
		alert("Значение переменной а = 13");
		break;
	case 14:
		alert("Значение переменной а = 14");
		break;
	case 15:
		alert("Значение переменной а = 15");
		break;
	default:
		alert("Значение переменной меньше нуля или больше 15");
}

			№5
5) Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
			Ответ.
var a = +prompt("Введите значение переменной \"а\" ввиде числа:");
var b = +prompt("Введите значение переменной \"b\" ввиде числа:");
function functionSum(a,b){
	return alert("Сумма переменных \"а\" и \"b\" = "(a+b));
}
alert(functionSum(a,b));

function functionSub(a,b){
	return alert("Разность переменных \"а\" и \"b\" = "(a-b));
}
alert(functionSub(a,b));

function functionMult(a,b){
	return alert("Произведение переменных \"а\" и \"b\" = "(a*b));

}
alert( functionMult(a,b));

function functionDiv(a,b){
	return alert("Частное значение  переменных \"а\" и \"b\" = "+(a/b));
}
alert( functionDiv(a,b));

		№6
6) Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), 
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного
 значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное
 значение (использовать switch).
		Ответ.
Здесь, как я считаю удобней использовать функции из адания №5, т.к. в задании №3 функции выполняют арифметическое выражение
в зависимости от результата условия, в котором описано какие действия выполнять если числа положительные или отрицательные или же
одно отрицательное а другое положительное. В этом же примере нужно выполнить действие, которое находится в зависимости от
значения переменной "operation".

var a = +prompt("Введите значение переменной \"а\" ввиде числа:");
var b = +prompt("Введите значение переменной \"b\" ввиде числа:");
var operation = +prompt("Выберите арифметическое действие:"+
"\n 1 = Сложить два числа(a+b);"+
"\n 2 = Определить разность(a-b);"+
"\n 3 = Найти произведение(a*b);"+
"\n 4 = Найти частное(a/b)");
function mathOperation(a, b, operation){
	switch(operation){
		case 1:
		functionSum(a,b);
		break;
		case 2:
		functionSub(a,b);
		break;
		case 3:
		functionMult(a,b);
		break;
		case 2:
		functionDiv(a,b);
		break;
	}
}
alert(mathOperation(a,b,operation));
		
		№7
7) * Сравнить null и 0. Попробуйте объяснить результат.
		Ответ.
null - ключевое слово языка JS, которое представляет собой отсутствие какого-либо
           объекта.
0 - это числовое значение или number. 

Объяснить не могу, но вот что получилось:
    var a = null > 0;
    var b = null == 0;
    var c = null >= 0;
    var d = null === 0;
    var e = null <= 0;
    var f = null != 0;
    alert(a);// false
    alert(b); // false
    alert(c);// true
    alert(d);//false
    alert(e);//true
    alert(f);//true

		№8
8) * С помощью рекурсии организовать функцию возведения числа в степень. 
Формат: function power(val, pow), где val – заданное число, pow – степень.

		Ответ.
В рекурсивных функциях пока тоже не смог разобраться. Попрошу Вас описать мне алгоритм
создания данной функции.
	